/-
Copyright (c) 2023 Jiale Miao. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Jiale Miao, Yichen Feng, Lily Frost, Archie Prime
Thanks: Kevin Buzzard
-/

import game_solution.level_03_principal


/-!
# Challenging Puzzles

This file contains some challenging puzzles. Notice that some of the lemmas or theorems
below are used in the previous levels.

-/

open set

variables {α : Type*}

namespace filter
/--
The infimum of filters is the filter generated by intersections of elements 
of the two filters.
-/
instance : has_inf (filter α) := ⟨λf g : filter α,
{ sets             := {s | ∃ (a ∈ f) (b ∈ g), s = a ∩ b },
  univ_sets        := 
  begin
    simp only [exists_prop, mem_set_of_eq],
    refine ⟨univ, filter.univ_mem, univ, filter.univ_mem, by simp only [univ_inter]⟩ 
  end,
  upward_closure   := 
  begin
    rintro x y ⟨a, ha, b, hb, rfl⟩ xy,
    refine ⟨a ∪ y, mem_of_superset ha (subset_union_left a y),
            b ∪ y, mem_of_superset hb (subset_union_left b y), _⟩,
    rw [← inter_union_distrib_right, union_eq_self_of_subset_left xy],
  end,
  inter_sets       :=
  begin
    rintro x y ⟨a, ha, b, hb, rfl⟩ ⟨c, hc, d, hd, rfl⟩,
    refine ⟨a ∩ c, inter_mem ha hc, b ∩ d, inter_mem hb hd, _⟩,
    ac_refl,
  end }⟩

lemma mem_inf_iff {f g : filter α} {s : set α} :
  s ∈ f ⊓ g ↔ ∃ t₁ ∈ f, ∃ t₂ ∈ g, s = t₁ ∩ t₂ := iff.rfl

lemma inter_mem_inf {f g : filter α} {s t : set α}
  (hs : s ∈ f) (ht : t ∈ g) : s ∩ t ∈ f ⊓ g :=
⟨s, hs, t, ht, rfl⟩

/-
Now we are coming to another challenging puzzle.
Hint for the forward direction: 'mem_inf_iff'
Hint for the backward direction: 'inter_mem_inf' and consider 's ∩ t'
-/
theorem mem_inf_principal {f : filter α} {s t : set α} :
  s ∈ f ⊓ 𝓟 t ↔ {x | x ∈ t → x ∈ s} ∈ f :=
begin
  split,
  { intro hs,
    rw mem_inf_iff at hs,
    obtain ⟨u, hu, v, hv, huv⟩ := hs,
    subst huv,
    rw filter.mem_principal at hv,
    suffices : u ⊆ {x : α | x ∈ t → x ∈ u ∩ v},
    { exact mem_of_superset hu this },
    intros x hx,
    simp only [mem_inter_iff, mem_set_of_eq],
    intro hxt,
    refine ⟨hx, _⟩,
    exact hv hxt },
  { intro h,
    have goal : s ∪ tᶜ ∈ f, 
    { convert h,
      ext,
      simp only [mem_union, mem_compl_iff, mem_set_of_eq],
      rw imp_iff_not_or,
      rw or_comm },
    clear h,
    suffices : s ∩ t ∈ f ⊓ 𝓟 t,
    { have h : s ∩ t ⊆ s := by simp only [inter_subset_left],
      exact mem_of_superset this h,},
    have h₁ := inter_mem_inf goal (mem_principal_self t),
    rw set.union_inter_distrib_right at h₁,
    simp at h₁,
    exact h₁ }
end

-- Hint: 'filter.inter_mem' might be helpful.
lemma compl_not_mem {f : filter α} {s : set α} (hf : f ≠ ⊥) (h : s ∈ f) : sᶜ ∉ f :=
begin
  intro hsc,
  have hp : s ∩ sᶜ ∈ f := filter.inter_mem h hsc,
  rw inter_compl_self at hp,
  apply hf,
  rwa ← filter.empty_mem_iff_bot,
end

instance : semilattice_inf (filter α) :=
{ inf := filter.has_inf.inf,
  le := filter.partial_order.le,
  le_refl := partial_order.le_refl,
  le_trans := partial_order.le_trans,
  le_antisymm := partial_order.le_antisymm,
  inf_le_left :=
  begin
    intros f g s h,
    rw filter.mem_inf_iff,
    refine ⟨s, h, univ, filter.univ_mem, by simp only [inter_univ]⟩
  end,
  inf_le_right :=
  begin
    intros f g s h,
    rw filter.mem_inf_iff,
    refine ⟨univ, filter.univ_mem, s, h, by simp only [univ_inter]⟩ 
  end,
  le_inf :=
  begin
    intros f g k hfg hfk u hu,
    rw filter.mem_inf_iff at hu,
    obtain ⟨x, hx, y, hy, hxy⟩ := hu,
    subst hxy,
    specialize hfg hx,
    specialize hfk hy,
    exact inter_mem hfg hfk 
  end }

end filter